recap:
local search sometimes will get caught in local max so 
need random restart 

adversial search
play ahead and play against other players
minimax algorithms
both players play best

alpha beta pruning
result is same as minimax algorithms
but we prune away some branches that wont affect the result
1. alpha beta, every node is initialized with parent node
2. if max player, update alpha
3. if min player, update beta
4. is alpha>or equal to beta, prune


(a) Two possible reasons why informed search might be a bad idea 
for solving Nonogram puzzles:

Exponential Search Space: Informed search algorithms like A* search 
typically explore a large portion of the search space by considering 
various combinations of colors for each cell. In Nonogram puzzles, 
the search space grows exponentially with the grid size, making it 
impractical to explore all possibilities exhaustively.

Complex Heuristic Design: Designing an effective heuristic for Nonogram 
puzzles is challenging. The heuristics would need to capture the complex 
relationships between rows and columns, making it computationally expensive 
and potentially not very informative. It can be hard to come up with a 
good heuristic that guides the search efficiently.



q2:





















q3:
why informed search not good idea?
- seach space is very large 2 to power of n x n
- no need care about past, only int in goal

state representation
- n by n boolean matrix

intial state
- everything is 0

goal state
- fulfill row and column constraints

transition function
- if that row is 3, we shift a block of 3 left and right

evaluation function
- number of violated constraint


i. Define a Candidate Solution:
The candidate solution represents the current state of the Nonogram grid. 
It's a 2D grid of size n×n, where each cell can be either "black" or "white."
Initialize the grid with an initial state where no cells are colored 
(all "white").
Maintain data structures for row and column constraints to keep track 
of the consecutive group sizes of black cells in each row and column.

ii. Define a Transition Function:
The transition function generates new candidate solutions by making local
 changes to the current grid. You can consider two types of transitions:
Swap: Swap the color of two adjacent cells (e.g., swap a black cell with
 a white cell).
Flip: Flip the color of a single cell (from black to white or vice versa).
When applying a transition, ensure that it respects the row and column 
constraints. For example, you cannot place a black cell in a row or 
column that has already reached its maximum consecutive group size.

iii. Define a Heuristic Function:
The heuristic function evaluates the "goodness" of a candidate solution. 
In the context of Nonogram puzzles, you can design the heuristic as 
follows:
Calculate the number of violated constraints in the current state. 
For each row and column, count how many consecutive black cells exceed 
the specified constraints.
Assign a higher value to states with more violated constraints, 
indicating a worse solution.
A valid solution with all constraints satisfied should have a heuristic 
value of 0.

(b) State Representation:
A reasonable state representation for the Nonogram problem could be a 
2D grid of size n×n where each cell can be either marked as "black" or
 "white" (colored or blank). Additionally, you would need to maintain 
 the row and column constraints for each cell. For example, you could 
 use a data structure like this:

Grid: An n×n matrix where each cell can be "black" or "white."
Row Constraints: An array of lists, where each list corresponds to 
a row and contains the consecutive group sizes of black cells in that row.
Column Constraints: An array of lists, where each list corresponds 
to a column and contains the consecutive group sizes of black cells 
in that column.

(c) Initial and Goal States:

Initial State: An empty grid with no cells colored, and the row and 
column constraints provided.
Goal State: A fully colored grid that satisfies all row and column 
constraints.
(d) Transition Function:
The transition function generates new candidate solutions by making 
local changes to the current grid. You can consider two types of 
transitions:

Swap: Swap the color of two adjacent cells.
Flip: Flip the color of a single cell (from black to white or vice versa).
(e) Heuristic Function and Goal Test:
A reasonable heuristic function for evaluating the "goodness" 
of a candidate solution could be to count the number of constraints 
violated in the current state. The more constraints violated, the
 worse the solution. The goal state would be reached when the heuristic 
 function returns a value of 0, indicating that all constraints are 
 satisfied.

The heuristic function could also be used as a goal test by checking 
whether it returns 0. If the heuristic returns 0, it means all constraints
 are satisfied, and you have a valid solution.

(f) Combating Local Minima:
To combat local minima in a local search approach for Nonogram puzzles, 
you can consider several strategies:

Random Restart: Periodically restart the search from a random or promising
state to escape local minima.
Diversification: Introduce randomness in the transition function by 
occasionally making exploratory moves that don't strictly follow the 
heuristic. This can help the search explore different parts of the 
state space.
Simulated Annealing: Use simulated annealing with a temperature 
parameter to control the acceptance of worse solutions early in 
the search and gradually reduce the temperature to focus on the 
best solutions later.
Tabu Search: Maintain a tabu list to prevent revisiting recently 
explored states.
Hybrid Approaches: Combine local search with other techniques, such 
as genetic algorithms or constraint propagation, to improve the search's 
ability to escape local minima.

